<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Controller;

use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use ManuelAguirre\Bundle\TranslationBundle\Entity\TranslationRepository;
use ManuelAguirre\Bundle\TranslationBundle\Synchronization\Synchronizator;
use ManuelAguirre\Bundle\TranslationBundle\Translation\CacheRemover;
use ManuelAguirre\Bundle\TranslationBundle\Translation\Loader\DoctrineLoader;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\HttpFoundation\BinaryFileResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\ResponseHeaderBag;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Translation\Dumper\XliffFileDumper;
use Symfony\Component\Validator\Validator\ValidatorInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * @author Manuel Aguirre <programador.manuel@gmail.com>
 */
class TranslationController extends AbstractController
{
    /**
     * @var ParameterBagInterface
     */
    private $parameters;

    public function __construct(ParameterBagInterface $parameters)
    {
        $this->parameters = $parameters;
    }

    /**
     * @Route("/list/{page}", name="manuel_translation_list", defaults={"page" = 1})
     */
    public function indexAction(
        Request $request,
        TranslationRepository $repository,
        $page = 1
    ) {
        return $this->render('@ManuelTranslation/Default/index.html.twig', array(
            'locales' => $this->parameters->get('manuel_translation.locales'),
            'domains' => $repository->getExistentDomains(),
        ));
    }

    /**
     * @Route("/show/item/{id}", name="manuel_translation_show_item")
     */
    public function getTranslationItemAction(Translation $translation)
    {
        return $this->render('@ManuelTranslation/Translation/_row.html.twig', array(
            'translation' => $translation,
            'locales' => $this->parameters->get('manuel_translation.locales'),
        ));
    }

    /**
     * @Route("/save-from-profiler", name="manuel_translation_save_from_profiler")
     */
    public function saveFromProfilerAction(
        Request $request,
        ValidatorInterface $validator,
        TranslationRepository $repository
    ) {
        $translation = $this->getNewTranslationInstance();
        $translation->setCode($request->request->get('code'));
        $translation->setDomain($request->request->get('domain'));

        foreach ($request->request->get('values', array()) as $locale => $value) {
            $translation->setValue($locale, $value);
        }

        if (count($validator->validate($translation)) == 0) {
            $repository->saveTranslation($translation);
        }

        return new Response('Ok');
    }

    /**
     * @return Translation
     */
    protected function getNewTranslationInstance()
    {
        $translation = new Translation();
        $translation->setNew(false);
        $translation->setAutogenerated(false);
        $translation->setActive(true);

        foreach ($this->parameters->get('manuel_translation.locales') as $locale) {
            $translation->setValue($locale, null);
        }

        return $translation;
    }

    /**
     * @Route("/update_all", name="manuel_translation_export")
     */
    public function updateXliffAction(
        $_locale,
        DoctrineLoader $doctrineLoader,
        XliffFileDumper $xliffFileDumper
    ) {
        $catalogue = $doctrineLoader->load('', $_locale);
        $path = $this->parameters->get('manuel_translation.translations_update_dir');

        $xliffFileDumper->dump($catalogue, array(
            'path' => $path,
        ));

        return $this->redirectToRoute('manuel_translation_list');
    }

    /**
     * @Route("/download.php", name="manuel_translation_download_backup_file")
     */
    public function downloadBackupAction()
    {
        $response = new BinaryFileResponse(
            $this->parameters->get('manuel_translation.translations_backup_dir') . 'translations.php'
        );

        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT);

        return $response;
    }

    /**
     * @Route("/live-download.php", name="manuel_translation_download_live_backup_file")
     */
    public function liveDownloadBackupAction(
        Synchronizator $synchronizator,
        TranslatorInterface $translator
    ) {
        $path = $this->getParameter('kernel.cache_dir') . '/translations.php';

        if (!$synchronizator->generateFile($path)) {
            $this->addFlash('warning',
                $translator->trans('local_hash_update_of_range', array(), 'ManuelTranslationBundle'));

            return $this->redirectToRoute('manuel_translation_list');
        }

        $response = new BinaryFileResponse($path);
        $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT);

        return $response;
    }

    /**
     * @Route("/clear-cache", name="manuel_translation_clear_cache")
     */
    public function clearCacheAction(
        CacheRemover $cacheRemover
    ) {
        if (false !== $cacheRemover->clear()) {
            $this->addFlash('success', 'Caché limpiada con éxito');
        } else {
            $this->addFlash('warning', 'No se pudo limpiar la caché de traducciones');
        }

        return $this->redirectToRoute('manuel_translation_list');
    }
}