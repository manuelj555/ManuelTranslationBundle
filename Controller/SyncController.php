<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Controller;

use Doctrine\ORM\EntityManagerInterface;
use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use ManuelAguirre\Bundle\TranslationBundle\Synchronization\Synchronizator;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Contracts\Translation\TranslatorInterface;


/**
 * @author Manuel Aguirre <programador.manuel@gmail.com>
 */
class SyncController extends AbstractController
{
    /**
     * @var ParameterBagInterface
     */
    private $parameters;

    public function __construct(ParameterBagInterface $parameters)
    {
        $this->parameters = $parameters;
    }

    /**
     * @Route("/generate-file", name="manuel_translation_generate_file")
     */
    public function generateFilesAction(
        Synchronizator $synchronizator,
        TranslatorInterface $translator
    ) {
        if ($synchronizator->generateFile()) {
            $this->addFlash('success',
                $translator->trans('update_file_complete_flash', array(), 'ManuelTranslationBundle'));
        } else {
            $this->addFlash('warning',
                $translator->trans('local_hash_update_of_range', array(), 'ManuelTranslationBundle'));
        }

        return $this->redirectToRoute('manuel_translation_list');
    }

    /**
     * @Route("/sync", name="manuel_translation_load_from_file")
     */
    public function syncAction(
        Synchronizator $synchronizator
    ) {
        $result = $synchronizator->sync();

        $filenameTemplate = $this->parameters->get('manuel_translation.filename_template');

        return $this->render('@ManuelTranslation/Sync/resolve_conflicts.html.twig', array(
            'news' => $result->getNews(),
            'updates' => $result->getUpdated(),
            'conflicted_items' => $result->getConflictItems(),
        ));
    }

    /**
     * @Route("/resolve-conflict/{id}",
     *  name="manuel_translation_resolve_conflict"
     * )
     */
    public function resolveConflictAction(
        Translation $translation,
        Request $request,
        Synchronizator $synchronizator,
        EntityManagerInterface $entityManager
    ) {
        $values = $request->request->get('values', array());
        $files = $request->request->get('files', array());
        $hash = $request->request->get('hash');
        $active = $request->request->get('active');
        $new = $request->request->get('new');
        $autogenerated = $request->request->get('autogenerated');
        $lastChanged = $request->request->get('last_changed');

        $synchronizator->updateTranslation(
            $translation, $values, $files, $hash, $active, $new, $autogenerated, $lastChanged
        );
        $entityManager->flush();

        return new Response('Ok');
    }

    /**
     * @Route("/resolve-conflict-done",
     *  name="manuel_translation_resolve_conflict_done"
     * )
     */
    public function doneSyncAction(
        Synchronizator $synchronizator
    )
    {
        $synchronizator->markSyncAsDone();

        return $this->redirectToRoute('manuel_translation_list');
    }
}