<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Serializer\Normalizer;

use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use Symfony\Component\PropertyAccess\PropertyAccessorInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
use Symfony\Component\Serializer\Normalizer\scalar;

/**
 * @author Manuel Aguirre <programador.manuel@gmail.com>
 */
class TranslationNormalizer implements NormalizerInterface, DenormalizerInterface
{
    /**
     * @var PropertyAccessorInterface
     */
    private $propertyAccesor;

    /**
     * TranslationNormalizer constructor.
     *
     * @param PropertyAccessorInterface $propertyAccesor
     */
    public function __construct(PropertyAccessorInterface $propertyAccesor)
    {
        $this->propertyAccesor = $propertyAccesor;
    }

    /**
     * @param Translation $translation
     * @param null $format
     * @param array $context
     * @return array
     */
    public function normalize($translation, $format = null, array $context = array())
    {
        return [
            'id' => $translation->getId(),
            'active' => $translation->getActive(),
            'code' => $translation->getCode(),
            'new' => $translation->getNew(),
            'autogenerated' => $translation->getAutogenerated(),
            'domain' => $translation->getDomain(),
            'files' => $translation->getFiles(),
            'values' => $translation->getValues(),
            'createdAt' => $translation->getCreatedAt(),
            'lastChanged' => $translation->getLastChanged(),
            'updatedAt' => $translation->getUpdatedAt(),
        ];
    }

    public function denormalize($data, $class, $format = null, array $context = array())
    {
        if (isset($context['object_to_populate'])) {
            /** @var Translation $translation */
            $translation = $context['object_to_populate'];
        } else {
            $translation = new Translation();
        }

        unset($data['createdAt'], $data['updatedAt'], $data['id'], $data['hash']);

        foreach ($data as $key => $value) {
            $this->propertyAccesor->setValue($translation, $key, $value);
        }

        return $translation;
    }

    public function supportsNormalization($data, $format = null)
    {
        return $data instanceof Translation;
    }

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type == Translation::class;
    }
}