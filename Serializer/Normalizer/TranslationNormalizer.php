<?php
/*
 * This file is part of the Manuel Aguirre Project.
 *
 * (c) Manuel Aguirre <programador.manuel@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ManuelAguirre\Bundle\TranslationBundle\Serializer\Normalizer;

use ManuelAguirre\Bundle\TranslationBundle\Entity\Translation;
use Symfony\Component\PropertyAccess\PropertyAccessorInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

/**
 * @author Manuel Aguirre <programador.manuel@gmail.com>
 */
class TranslationNormalizer implements NormalizerInterface, DenormalizerInterface
{
    public function __construct(private PropertyAccessorInterface $propertyAccesor)
    {
    }

    public function normalize(mixed $object, string $format = null, array $context = [])
    {
        return [
            'id' => $object->getId(),
            'active' => $object->getActive(),
            'code' => $object->getCode(),
            'new' => $object->getNew(),
            'autogenerated' => $object->getAutogenerated(),
            'domain' => $object->getDomain(),
            'files' => $object->getFiles(),
            'values' => $object->getValues(),
            'createdAt' => $object->getCreatedAt(),
            'lastChanged' => $object->getLastChanged(),
            'updatedAt' => $object->getUpdatedAt(),
        ];
    }

    public function denormalize(mixed $data, string $type, string $format = null, array $context = [])
    {
        if (isset($context['object_to_populate'])) {
            /** @var Translation $translation */
            $translation = $context['object_to_populate'];
        } else {
            $translation = new Translation();
        }

        unset($data['createdAt'], $data['updatedAt'], $data['id'], $data['hash']);

        foreach ($data as $key => $value) {
            $this->propertyAccesor->setValue($translation, $key, $value);
        }

        return $translation;
    }

    public function supportsNormalization(mixed $data, $format = null)
    {
        return $data instanceof Translation;
    }

    public function supportsDenormalization(mixed $data, string $type, string $format = null)
    {
        return $type == Translation::class;
    }
}